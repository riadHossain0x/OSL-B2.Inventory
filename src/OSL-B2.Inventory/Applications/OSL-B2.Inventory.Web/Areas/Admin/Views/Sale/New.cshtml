@using System.Dynamic
@model OSL_B2.Inventory.Web.Areas.Admin.Models.SaleCreateViewModel
@{
    ViewData["Title"] = "New Sale";
    ViewBag.PageNav = "New";

    dynamic MidNav = new ExpandoObject();
    MidNav.Title = "Sale";
    MidNav.Link = "/Admin/Sale/";
    ViewBag.MidNav = MidNav;
}
@section Styles
{
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        .select2-selection__rendered {
            line-height: 24px !important;
        }

        .select2-container .select2-selection--single {
            height: 34px !important;
        }

        .select2-selection__arrow {
            height: 34px !important;
        }
    </style>
}
<div class="card card-primary">
    <div class="card-header">
        <div class="row">
            <div class="col-6">
                <div class="float-left">
                    <h3 class="card-title">New Sale Form</h3>
                </div>
            </div>
            <div class="col-6">
                <div class="float-right">
                    <a href="/Admin/Sale" class="btn btn-primary btn-sm">Manage Sale</a>
                </div>
            </div>
        </div>
    </div>
    @using (Html.BeginForm("New", "Sale", new { area = "Admin" }, FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <div class="card-body">
            <div class="form-group row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label" })
                    <i class="text-danger">*</i>
                </div>
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.CustomerId, new SelectList(Model.Customers, "Value", "Text"),
                                                                htmlAttributes: new { @class = "form-control", id = "customer" })
                    @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger", id = "spanCustomer"})
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label" })
                    <i class="text-danger">*</i>
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-12">
                    <table id="table" class="table table-bordered">
                        <thead>
                            <tr>
                                <th class="text-center">Category</th>
                                <th class="text-center">Product</th>
                                <th class="text-center">Available Qty</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-center">Price</th>
                                <th class="text-center" style="width:20%">Total</th>
                                <th class="text-center" style="width:8%">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan="5" class="text-right">@Html.DisplayNameFor(model => model.GrandTotal):</th>
                                <th>
                                    @Html.EditorFor(model => model.GrandTotal, new { htmlAttributes = new { @class = "form-control text-right", @disabled = "disabled", @min = 0 } })
                                </th>
                                <th></th>
                            </tr>
                            <tr>
                                <th class="text-center">
                                    <button type="button" id="btnAdd" class="btn btn-sm btn-info m-1" style="width:80%">Add New Item</button>
                                </th>
                                <th colspan="4" class="text-right">@Html.DisplayNameFor(model => model.PaidAmount):</th>
                                <th>
                                    @Html.EditorFor(model => model.PaidAmount, new { htmlAttributes = new { @class = "form-control text-right", id = "PaidAmount", @min = 0 } })
                                </th>
                                <th></th>
                            </tr>
                            <tr>
                                <th>
                                    <div class="text-center row">
                                        <div class="col-md-6">
                                            <button type="submit" id="btnSubmit" class="btn btn-sm btn-primary m-1" style="width:80%">Submit</button>
                                        </div>
                                        <div class="col-md-6">
                                            <button type="button" id="btnFullPaid" class="btn btn-sm btn-warning m-1" style="width:80%">Full Paid</button>
                                        </div>
                                    </div>
                                </th>
                                <th colspan="4" class="text-right">@Html.DisplayNameFor(model => model.Due):</th>
                                <th>
                                    @Html.EditorFor(model => model.Due, new { htmlAttributes = new { @class = "form-control text-right", id = "Due", @min = 0, @disabled = "disabled" } })
                                </th>
                                <th></th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    }

</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="~/Content/js/site.js"></script>
    <script>
        var render = "";
        var count = 0;
        $(document).ready(function () {
            render = `<tr id="section-{0}">
                                <th style="width:20%">
                                    <span id="spanCategory" class="field-validation-valid text-danger" data-valmsg-for="ProductId" data-valmsg-replace="true"></span>
                                    <select onchange="GetProducts(this, 'product-{0}');" class="form-control category" id="category" name="CategoryId">
                                        <option value="null">Select a Category</option>
                                        @if(ViewBag.Categories != null)
                                        {
                                            foreach(var category in ViewBag.Categories)
                                            {
                                                <option value="@category.Id">@category.Name</option>
                                            }
                                        }
                                    </select>
                                </th>
                                <th style="width:20%">
                                    <span id="spanProduct" class="field-validation-valid text-danger" data-valmsg-for="ProductId" data-valmsg-replace="true"></span>
                                    <select onchange="GetProductQty(this, '{0}');" class="form-control valid product" id="product-{0}" name="ProductId">
                                    </select>
                                </th>
                                 <th class="text-right" style="width:12%">
                                    <input class="form-control text-box single-line text-right AvailableQty" id="AvailableQty-{0}" type="text" value="0" min=0 disabled>
                                </th>
                                <th class="text-right" style="width:12%">
                                    <span id="spanQuantity" class="field-validation-valid text-danger" data-valmsg-for="Quantity" data-valmsg-replace="true"></span>
                                    <input onkeyup="calculateTotal('{0}')" class="form-control text-box single-line text-right Quantity" data-val="true" data-val-number="The field Quantity must be a number." data-val-required="The Quantity field is required." id="Quantity-{0}" name="Quantity" type="number" value="0" min=0>
                                </th>
                                <th class="text-right" style="width:12%">
                                    <span id="spanPrice" class="field-validation-valid text-danger" data-valmsg-for="Price" data-valmsg-replace="true"></span>
                                    <input onkeyup="calculateTotal('{0}')" class="form-control text-box single-line text-right Price" data-val="true" data-val-number="The field Price must be a number." data-val-required="The Price field is required." id="Price-{0}" name="Price" type="text" value="0.00" min=0>
                                </th>
                                <th class="text-right" style="width:15%">
                                    <span id="spanTotal" class="field-validation-valid text-danger" data-valmsg-for="Total" data-valmsg-replace="true"></span>
                                    <input class="form-control text-box single-line text-right total" data-val="true" data-val-number="The field Total must be a number." data-val-required="The Total field is required." id="Total-{0}" name="Total" type="text" value="0.00" min=0 readonly>
                                </th>
                                <th class="text-center" style="width:8%">
                                    <button type="button" id="btnDelete" class="btn btn-danger btn-sm">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </th>
                            </tr>`;
            $("#table").append(format(render, ++count));
        });

        // add new row in table
        $("#btnAdd").on("click", function () {
            $("#table").append(format(render, ++count));
            //select2Init();
        });

        // delete current row
        $("#table").on("click", "#btnDelete", function () {
            var rowCount = $("#table tr").length;
            if (rowCount > 3)
                $(this).closest("tr").remove();
            return false;
        });

        // Dropdown events
        var dictQty = new Object(); // key value for id and qty
        var dictPrice = new Object(); // key value for id and price

        function GetProducts(event, element) {
            var value = event.value;
            if (value == 'null') {
                $('#' + element).empty();
                return false;
            }

            $.ajax({
                url: '/admin/purchase/GetProducts',
                type: 'POST',
                data: { 'categoryId': value },
                success: function (data) {
                    $('#' + element).empty();
                    $('#' + element).append($('<option>', {
                        value: 'null',
                        text: 'Select a Product'
                    }));
                    $.each(data, function (i, item) {
                        $('#' + element).append($('<option>', {
                            value: item.value,
                            text: item.text
                        }));

                        dictQty[item.value] = item.qty; // load product id and qty.
                        dictPrice[item.value] = item.price // load product id and price.
                    });
                }
            });
        }

        function GetProductQty(event, element) {
            var value = event.value;
            var qty = dictQty[value];
            var price = dictPrice[value];

            $("#AvailableQty-" + element).val(qty);
            $("#Price-" + element).val(price);
        }

        // validation
        $("#btnSubmit").on("click", function () {

            var error = 0;

            $(".total").each(function () {
                if ($(this).val() == '0' || $(this).val() == '0.00') {
                    $("#spanTotal").html("The Total field is required");
                    $("#spanProduct").html("");
                    $("#spanCategory").html("");
                    $("#spanCustomer").html("");
                    error++;
                }
            });

            $(".product").each(function () {
                if ($(this).val() == 'null') {
                    $("#spanProduct").html("The Product field is required.");
                    $("#spanCategory").html("");
                    $("#spanTotal").html("");
                    error++;
                }
            });

            $("[id=category]").each(function () {
                if ($(this).val() == 'null') {
                    $("#spanCategory").html("The Category field is required.");
                    $("#spanProduct").html("");
                    $("#spanTotal").html("");
                    error++;
                }
            });

            if ($("#customer").val() == '-1') {
                $("#spanCustomer").html("The Customer field is required.")
                $("#spanCategory").html("");
                $("#spanProduct").html("");
                $("#spanTotal").html("");
                error++;
            }

            if (error > 0)
                return false;

            $("#spanCustomer").html("");
            $("#spanCategory").html("");
            $("#spanProduct").html("");
            $("#spanTotal").html("");
        });

        // Calculate total price (quantity * price)
        function calculateTotal(elementId) {
            var qtyValue = $("#Quantity-" + elementId).val();
            var rateValue = $("#Price-" + elementId).val();

            var total = rateValue * qtyValue;
            $("#Total-" + elementId).val(total);

            calculateGrandTotal();
        }

        // Calculate grand total price
        function calculateGrandTotal() {
            var grandTotal = 0;
            for (let i = 1; i <= count; i++) {
                if ($("#Total-" + i).length) {

                    var totalValue = parseFloat($("#Total-" + i).val());

                    if (totalValue !== null || totalValue !== "NaN") {
                        grandTotal += totalValue;
                    }
                }

            }
            $("#GrandTotal").val(grandTotal);

            // calculate due amount
            calculateDueAmount()
        }

        // Calculate due 'Paid Amount' onchange event
        function calculateDueAmount() {
            var paidVal = $("#PaidAmount").val();
            var grandTotal = $("#GrandTotal").val();
            var dueVal = grandTotal - paidVal;
            $("#Due").val(dueVal);
        }

    </script>

    <script type="text/javascript">
        $(function () {
            $("#customer").select2(
                {
                    //placeholder: "Select a product",
                    //allowClear: true,
                    /*  theme: "classic"*/
                });

            $("#PaidAmount").on("input", function () {
                calculateDueAmount();
            });
        });
    </script>
}
